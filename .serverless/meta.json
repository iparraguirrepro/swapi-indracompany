{
  "C:\\Users\\ID-04\\Documents\\MAIN\\Nestjs-TypeOrm-Hex-master": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\ID-04\\Documents\\MAIN\\Nestjs-TypeOrm-Hex-master",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "swapi-indra",
      "plugins": [
        "serverless-localstack",
        "serverless-plugin-typescript",
        "serverless-plugin-warmup"
      ],
      "provider": {
        "name": "aws",
        "stage": "local",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "IndrapiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/swapi-indra-local-indrapi"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "swapi-indra",
                          "local",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-indra-local*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/swapi-indra-local*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "swapi-indra",
                      "local",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "IndrapiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-9263b4f0-1ebe",
                  "S3Key": "serverless/swapi-indra/local/1731468158673-2024-11-13T03:22:38.673Z/swapi-indra.zip"
                },
                "Handler": "src/lambda.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "swapi-indra-local-indrapi",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "IndrapiLogGroup"
              ]
            },
            "IndrapiLambdaVersionxLvuvGFRZTsNdfTsuFFUAUrNVTQzHWKq26cZpjj1Gzk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "IndrapiLambdaFunction"
                },
                "CodeSha256": "qUjQYNzrW+5cKx9UTRfNjBH82C9vlWtGRPNOQpuAo+A="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "local-swapi-indra",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayMethodOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "IndrapiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "IndrapiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1731468077753": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "local"
              },
              "DependsOn": [
                "ApiGatewayMethodOptions",
                "ApiGatewayMethodAny"
              ]
            },
            "IndrapiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "IndrapiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-9263b4f0-1ebe",
              "Export": {
                "Name": "sls-swapi-indra-local-ServerlessDeploymentBucketName"
              }
            },
            "IndrapiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "IndrapiLambdaVersionxLvuvGFRZTsNdfTsuFFUAUrNVTQzHWKq26cZpjj1Gzk"
              },
              "Export": {
                "Name": "sls-swapi-indra-local-IndrapiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/local"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-swapi-indra-local-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "indrapi": {
          "handler": "src/lambda.handler",
          "package": {
            "patterns": [
              "!./**",
              "./src/lambda.ts"
            ],
            "exclude": [
              "node_modules/serverless-plugin-typescript"
            ]
          },
          "events": [
            {
              "http": {
                "method": "any",
                "path": "",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "swapi-indra-local-indrapi",
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "IndrapiLambdaVersionxLvuvGFRZTsNdfTsuFFUAUrNVTQzHWKq26cZpjj1Gzk"
        }
      },
      "build": {
        "esbuild": false
      },
      "package": {
        "patterns": [
          "!node_modules/**"
        ],
        "artifactsS3KeyDirname": "serverless/swapi-indra/local/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-9263b4f0-1ebe",
        "artifact": "C:\\Users\\ID-04\\Documents\\MAIN\\Nestjs-TypeOrm-Hex-master\\.serverless\\swapi-indra.zip",
        "artifactDirectoryName": "serverless/swapi-indra/local/1731468158673-2024-11-13T03:22:38.673Z"
      },
      "custom": {
        "localstack": {
          "debug": true,
          "build": {
            "esbuild": false
          },
          "stages": [
            "local"
          ],
          "host": "http://localhost",
          "edgePort": 4566,
          "autostart": true,
          "networks": [
            "host",
            "overlay"
          ],
          "endpoints": {
            "Lambda": "http://localhost:4574",
            "DynamoDB": "http://localhost:4570"
          },
          "lambda": {
            "mountCode": false
          },
          "docker": {
            "sudo": false
          }
        },
        "stages": {
          "local": "..."
        }
      }
    },
    "serviceRawFile": "service: swapi-indra\n\nplugins:\n  - serverless-localstack\n  - serverless-plugin-typescript\n  - serverless-plugin-warmup\nprovider:\n  name: aws\n  stage: local\n  runtime: nodejs20.x\n#  profile: localstack\n\n\nfunctions:\n  indrapi:\n    handler: src/lambda.handler\n    package:\n      patterns:\n        - \"!./**\"\n        - \"./src/lambda.ts\"\n    events:\n      - http:\n          method: any\n          path: /\n          cors: true\n\nbuild:\n  esbuild: false\n\npackage:\n  patterns:\n    - '!node_modules/**'\n\ncustom:\n  localstack:\n    debug: true\n    build:\n      esbuild: false\n    stages:\n      - local\n    host: http://localhost\n    edgePort: 4566\n    autostart: true\n    networks:\n      - host\n      - overlay\n    endpoints:\n      Lambda: http://localhost:4574\n      DynamoDB: http://localhost:4570\n      # S3: http://localhost:4572\n      # CloudFormation: http://localhost:4581\n      # Elasticsearch: http://localhost:4571\n      # ES: http://localhost:4578\n      # SNS: http://localhost:4575\n      # SQS: http://localhost:4576\n      # Kinesis: http://localhost:4568\n    lambda:\n      mountCode: false\n    docker:\n      sudo: False\n  stages:\n    local:\n      ...",
    "command": [
      "deploy"
    ],
    "options": {
      "stage": "local",
      "debug": "*"
    },
    "error": {
      "message": "An error occurred: IndrapiLambdaFunction - An error occurred (ResourceConflictException) when calling the CreateFunction operation: Function already exist: swapi-indra-local-indrapi.",
      "stack": "ServerlessError2: An error occurred: IndrapiLambdaFunction - An error occurred (ResourceConflictException) when calling the CreateFunction operation: Function already exist: swapi-indra-local-indrapi.\n    at <anonymous> (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\plugins\\aws\\lib\\monitor-stack.js:168:23)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at AwsDeploy.createFallback (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\plugins\\aws\\lib\\update-stack.js:82:5)\n    at aws:deploy:deploy:updateStack (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\plugins\\aws\\deploy\\index.js:219:9)\n    at PluginManager.runHooks (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\classes\\plugin-manager.js:680:9)\n    at PluginManager.invoke (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\classes\\plugin-manager.js:719:9)\n    at PluginManager.spawn (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\classes\\plugin-manager.js:740:5)\n    at PluginManager.runHooks (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\classes\\plugin-manager.js:680:9)\n    at PluginManager.invoke (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\classes\\plugin-manager.js:719:9)\n    at PluginManager.run (C:\\Users\\ID-04\\.serverless\\releases\\4.4.7\\serverless\\lib\\classes\\plugin-manager.js:768:7)",
      "code": "AWS_CLOUD_FORMATION_CREATE_STACK_INTERNAL_LAMBDA_FUNCTION_CREATE_FAILED"
    },
    "params": {},
    "machineId": "7337be99d9879bef859fd676ad746911",
    "stage": "local",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "92be6511-4fa6-4a7d-b49a-1dbfa2bef49f",
    "orgName": "iparraguirre",
    "userId": "2HdD6tgGPtf883Kg6q",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "iparraguirre",
    "subscription": null,
    "userEmail": "jonatan@iparraguirre.pro",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "000000000000",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "swapi-indra-local",
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:000000000000:stack/swapi-indra-local/e7215c43",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:000000000000:stack/swapi-indra-local/e7215c43",
    "serviceProviderAwsCfStackCreated": "2024-11-13T03:23:25.568Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-13T03:23:25.568Z",
    "serviceProviderAwsCfStackStatus": "CREATE_FAILED",
    "serviceProviderAwsCfStackOutputs": null
  }
}